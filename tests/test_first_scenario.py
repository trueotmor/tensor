import sys
import os
import logging
import time
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager

# Add project root to Python path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from pages.saby_contacts_page import SabyContactsPage
from pages.tensor_main_page import TensorMainPage
from pages.tensor_about_page import TensorAboutPage

logging.basicConfig(
    level=logging.INFO,
    format='%(message)s - %(levelname)s - %(asctime)s - %(name)s',
    handlers=[logging.StreamHandler()]
)

def test_first_scenario():
    logger = logging.getLogger(__name__)
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è")
    
    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()))

    try:
        saby_page = SabyContactsPage(driver)
        tensor_main = TensorMainPage(driver)
        tensor_about = TensorAboutPage(driver)

        # 1. Saby –∫–æ–Ω—Ç–∞–∫—Ç—ã
        logger.info("‚úÖ 1. –û—Ç–∫—Ä—ã–≤–∞–µ–º saby.ru")
        saby_page.open_page()
        
        logger.info("‚úÖ 2. –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
        saby_page.click_contacts_button()
        
        logger.info("‚úÖ 3. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –∂–¥–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –≤ —Ä–µ–≥–∏–æ–Ω")
        saby_page.click_contacts_link()
        
        current_url = saby_page.get_current_url()
        assert "/contacts" in current_url, f"–ù–µ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤. –¢–µ–∫—É—â–∏–π URL: {current_url}"
        logger.info(f"‚úÖ 4. –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {current_url}")

        # 2. –ë–∞–Ω–Ω–µ—Ä –¢–µ–Ω–∑–æ—Ä
        logger.info("‚úÖ 5. –ö–ª–∏–∫–∞–µ–º –Ω–∞ –±–∞–Ω–Ω–µ—Ä –¢–µ–Ω–∑–æ—Ä")
        saby_page.click_tensor_banner()
        
        current_url = driver.current_url
        assert "tensor.ru" in current_url, f"–ù–µ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ tensor.ru. –¢–µ–∫—É—â–∏–π URL: {current_url}"
        logger.info(f"‚úÖ 6. –ü–µ—Ä–µ—à–ª–∏ –Ω–∞ tensor.ru: {current_url}")

        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∞ "–°–∏–ª–∞ –≤ –ª—é–¥—è—Ö"
        logger.info("‚úÖ 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫ '–°–∏–ª–∞ –≤ –ª—é–¥—è—Ö'")
        power_block = tensor_main.find_power_block()
        assert power_block.is_displayed(), "–ë–ª–æ–∫ '–°–∏–ª–∞ –≤ –ª—é–¥—è—Ö' –Ω–µ –Ω–∞–π–¥–µ–Ω"
        logger.info("–ë–ª–æ–∫ '–°–∏–ª–∞ –≤ –ª—é–¥—è—Ö' –Ω–∞–π–¥–µ–Ω –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è")

        # 4. –ü–µ—Ä–µ—Ö–æ–¥ –≤ –ü–æ–¥—Ä–æ–±–Ω–µ–µ
        logger.info("‚úÖ 8. –ö–ª–∏–∫–∞–µ–º –Ω–∞ '–ü–æ–¥—Ä–æ–±–Ω–µ–µ'")
        tensor_main.click_details()
        
        current_url = driver.current_url
        assert "tensor.ru/about" in current_url, f"–ù–µ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É about. –¢–µ–∫—É—â–∏–π URL: {current_url}"
        logger.info("‚úÖ 9. –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É about")

        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        logger.info("‚úÖ 10. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        images = tensor_about.find_working_images()
        
        if len(images) == 0:
            raise AssertionError("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
        elif len(images) < 2:
            logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –º–µ–Ω–µ–µ 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ({len(images)})")
        else:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ä–∞–∑–º–µ—Ä–æ–≤
            images = tensor_about.find_working_images()
            first_size = images[0].size
            logger.info(f"–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            
            for i, img in enumerate(images[1:], 2):
                # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                current_images = tensor_about.find_working_images()
                if i - 1 < len(current_images):
                    img_size = current_images[i - 1].size
                    assert img_size == first_size, f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i} –∏–º–µ–µ—Ç –¥—Ä—É–≥–æ–π —Ä–∞–∑–º–µ—Ä: {img_size} vs {first_size}"
            
            logger.info(f"–í—Å–µ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞: {first_size}")
        
        logger.info("üéâ –í–ï–°–¨ –°–¶–ï–ù–ê–†–ò–ô –£–°–ü–ï–®–ù–û –í–´–ü–û–õ–ù–ï–ù!")
    
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        raise
    finally:
        driver.quit()

if __name__ == "__main__":
    test_first_scenario()